name: "Release"

on:
    push:
        branches:
            - main
    workflow_dispatch:
        inputs:
            force_upload_or_reupload_assets:
                description: "Force upload/re-upload assets."
                type: boolean
                default: false
                required: false

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
    NODE_VERSION: 22.17.0
    PNPM_VERSION: 10.13.1

jobs:
    version_or_publish:
        name: "Version or Publish"
        if: github.repository == 'buildzaku/zaku'
        permissions:
            contents: "write"
            pull-requests: "write"
        runs-on: ubuntu-latest
        outputs:
            is_published: ${{ steps.changesets.outputs.published }}
        steps:
            - name: "Checkout repository"
              uses: actions/checkout@v4

            - name: "Setup pnpm"
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: "Setup Node.js"
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: pnpm

            - name: "Get pnpm store directory"
              id: pnpm_cache
              shell: bash
              run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: "Setup pnpm cache"
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm_cache.outputs.pnpm_cache_dir }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-store-

            - name: "Setup Rust"
              uses: dtolnay/rust-toolchain@stable

            - name: "Setup Rust cache"
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./scripts/sync-metadata -> target"

            - name: "Install system dependencies"
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

            - name: "Install frontend dependencies"
              run: pnpm install

            - name: "Get new version"
              id: new_version
              run: |
                  pnpm changeset status --output=changeset-status.json
                  NEW_VERSION=$(jq --raw-output '.releases[0].newVersion' changeset-status.json)
                  rm changeset-status.json
                  echo "value=$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: "Create a release pull request"
              id: changesets
              uses: changesets/action@v1
              with:
                  commit: "chore(release): v${{ steps.new_version.outputs.value }}"
                  title: "chore(release): v${{ steps.new_version.outputs.value }}"
                  version: pnpm changeset-version
                  publish: pnpm changeset-tag
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build_and_upload_assets:
        name: "Build and upload assets"
        needs: [version_or_publish]
        if: ${{ github.repository == 'buildzaku/zaku' && (needs.version_or_publish.outputs.is_published == 'true' || github.event.inputs.force_upload_or_reupload_assets == 'true') }}
        permissions:
            contents: "write"
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                      args: "--ci --verbose --bundles dmg --target aarch64-apple-darwin"
                    - platform: "macos-latest"
                      args: "--ci --verbose --bundles dmg --target x86_64-apple-darwin"
                    - platform: "ubuntu-latest"
                      args: "--ci --verbose --bundles deb"
                    - platform: "windows-latest"
                      args: "--ci --verbose --bundles msi"
        runs-on: ${{ matrix.platform }}
        steps:
            - name: "Checkout repository"
              uses: actions/checkout@v4

            - name: "Setup pnpm"
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: "Setup Node.js"
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: pnpm

            - name: "Get pnpm store directory"
              id: pnpm_cache
              shell: bash
              run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: "Setup pnpm cache"
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm_cache.outputs.pnpm_cache_dir }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-store-

            - name: "Setup Rust"
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: "Setup Rust cache"
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            - name: "Install system dependencies (Ubuntu only)"
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

            - name: "Install frontend dependencies"
              run: pnpm install

            - name: "Build application and upload assets"
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tagName: "v__VERSION__"
                  releaseName: "v__VERSION__"
                  args: ${{ matrix.args }}
