name: "Release"

on:
    push:
        branches:
            - main
    workflow_dispatch:
        inputs:
            force_release_build_assets:
                description: "Force run release_build_assets"
                type: boolean
                default: false
                required: false
            force_snap_build_and_publish:
                description: "Force run build_snap & publish_snap"
                type: boolean
                default: false
                required: false

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
    NODE_VERSION: 22.17.0
    PNPM_VERSION: 10.13.1

jobs:
    version_or_publish:
        name: "Version or Publish"
        if: github.repository == 'buildzaku/zaku'
        permissions:
            contents: "write"
            pull-requests: "write"
        runs-on: ubuntu-latest
        outputs:
            # is_published: ${{ steps.changesets.outputs.published }}
            is_published: "false"
            version: ${{ steps.new_version.outputs.value }}
        steps:
            # - name: "Checkout repository"
            #   uses: actions/checkout@v4
            #   with: # TEMP
            #       fetch-depth: 0 # TEMP
            #       ref: ${{ github.head_ref }} # TEMP

            # - name: "Fetch main branch" # TEMP
            #   run: git fetch origin main:main # TEMP

            # - name: "Setup pnpm"
            #   uses: pnpm/action-setup@v4
            #   with:
            #       version: ${{ env.PNPM_VERSION }}

            # - name: "Setup Node.js"
            #   uses: actions/setup-node@v4
            #   with:
            #       node-version: ${{ env.NODE_VERSION }}
            #       cache: pnpm

            # - name: "Get pnpm store directory"
            #   id: pnpm_cache
            #   shell: bash
            #   run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

            # - name: "Setup pnpm cache"
            #   uses: actions/cache@v4
            #   with:
            #       path: ${{ steps.pnpm_cache.outputs.pnpm_cache_dir }}
            #       key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
            #       restore-keys: ${{ runner.os }}-pnpm-store-

            # - name: "Setup Rust"
            #   uses: dtolnay/rust-toolchain@stable

            # - name: "Setup Rust cache"
            #   uses: swatinem/rust-cache@v2
            #   with:
            #       workspaces: "./scripts/sync-metadata -> target"

            # - name: "Install system dependencies"
            #   run: |
            #       sudo apt-get update
            #       sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

            # - name: "Install frontend dependencies"
            #   run: pnpm install

            # - name: "Get new version"
            #   id: new_version
            #   run: |
            #       pnpm changeset status --output=changeset-status.json
            #       NEW_VERSION=$(jq --raw-output '.releases[0].newVersion' changeset-status.json)
            #       rm changeset-status.json
            #       echo "value=$NEW_VERSION" >> $GITHUB_OUTPUT

            # - name: "Create a release pull request"
            #   id: changesets
            #   uses: changesets/action@v1
            #   with:
            #       commit: "chore(release): v${{ steps.new_version.outputs.value }}"
            #       title: "chore(release): v${{ steps.new_version.outputs.value }}"
            #       version: pnpm changeset-version
            #       publish: pnpm changeset-tag
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: "Get new version"
              id: new_version
              run: |
                  echo "value=0.7.1" >> $GITHUB_OUTPUT

    release_build_assets:
        name: "Release Build Assets"
        needs: [version_or_publish]
        if: ${{ github.repository == 'buildzaku/zaku' && (needs.version_or_publish.outputs.is_published == 'true' || github.event.inputs.force_release_build_assets == 'true') }}
        permissions:
            contents: "write"
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                      arch: "aarch64-apple-darwin"
                      args: "--ci --verbose --bundles dmg --target aarch64-apple-darwin"
                    - platform: "macos-latest"
                      arch: "x86_64-apple-darwin"
                      args: "--ci --verbose --bundles dmg --target x86_64-apple-darwin"
                    - platform: "ubuntu-latest"
                      arch: null
                      args: "--ci --verbose --bundles deb"
                    - platform: "windows-latest"
                      arch: null
                      args: "--ci --verbose --bundles msi"
        runs-on: ${{ matrix.platform }}
        steps:
            - name: "Checkout repository"
              uses: actions/checkout@v4

            - name: "Setup pnpm"
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: "Setup Node.js"
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: pnpm

            - name: "Get pnpm store directory"
              id: pnpm_cache
              shell: bash
              run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: "Setup pnpm cache"
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm_cache.outputs.pnpm_cache_dir }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-store-

            - name: "Setup Rust"
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.arch }}

            - name: "Setup Rust cache"
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            - name: "Install linux dependencies"
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

            - name: "Install frontend dependencies"
              run: pnpm install

            - name: "Build and upload artifacts"
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tagName: "v__VERSION__"
                  releaseName: "v__VERSION__"
                  args: ${{ matrix.args }}

    build_snap:
        name: "Build Snap"
        needs: [version_or_publish]
        if: ${{ github.repository == 'buildzaku/zaku' && (needs.version_or_publish.outputs.is_published == 'true' || github.event.inputs.force_snap_build_and_publish == 'true') }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - arch: "x86_64-unknown-linux-gnu"
                      target: "amd64"
                    - arch: "aarch64-unknown-linux-gnu"
                      target: "arm64"
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout repository"
              uses: actions/checkout@v4

            - name: "Setup pnpm"
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: "Setup Node.js"
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: pnpm

            - name: "Get pnpm store directory"
              id: pnpm_cache
              shell: bash
              run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: "Setup pnpm cache"
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pnpm_cache.outputs.pnpm_cache_dir }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-store-

            - name: "Setup Rust"
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.arch }}

            - name: "Setup Rust cache"
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            - name: "Install system dependencies"
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

                  # Enable multiarch for cross-compilation
                  sudo dpkg --add-architecture arm64

            - name: "Install ARM dependencies"
              if: matrix.target == 'arm64'
              run: |
                  sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config-aarch64-linux-gnu
                  sudo apt-get install -y libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 libasound2-dev:arm64

            - name: "Install frontend dependencies"
              run: pnpm install

            - name: "Build application"
              run: pnpm tauri build --bundles deb --target ${{ matrix.arch }}
              env:
                  CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
                  CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
                  PKG_CONFIG_aarch64_unknown_linux_gnu: aarch64-linux-gnu-pkg-config
                  PKG_CONFIG_ALLOW_CROSS: 1

            - name: "Extract .deb to snap-stage/"
              run: |
                  mkdir -p snap-stage-${{ matrix.target }}
                  dpkg -x src-tauri/target/${{ matrix.arch }}/release/bundle/deb/*.deb snap-stage-${{ matrix.target }}/
                  sed -i -e "s|Icon=zaku|Icon=/usr/share/icons/hicolor/32x32/apps/zaku.png|g" snap-stage-${{ matrix.target }}/usr/share/applications/Zaku.desktop

            - name: "Upload snap-stage artifact"
              uses: actions/upload-artifact@v4
              with:
                  name: snap-stage-${{ matrix.target }}
                  path: snap-stage-${{ matrix.target }}/

    publish_snap:
        name: "Publish Snap"
        needs: [version_or_publish, build_snap]
        runs-on: ubuntu-latest
        permissions:
            contents: "read"
        steps:
            - name: "Checkout repository"
              uses: actions/checkout@v4

            - name: "Download all snap-stage artifacts"
              uses: actions/download-artifact@v4
              with:
                  pattern: snap-stage-*
                  path: artifacts/

            - name: "Combine artifacts into snap-stage"
              run: |
                  mkdir -p snap-stage

                  # Copy shared files from amd64 (icons, desktop files, etc.)
                  cp -r artifacts/snap-stage-amd64/* snap-stage/

                  # Create architecture-specific binary directories
                  mkdir -p snap-stage/usr/bin/amd64 snap-stage/usr/bin/arm64
                  cp artifacts/snap-stage-amd64/usr/bin/zaku snap-stage/usr/bin/amd64/
                  cp artifacts/snap-stage-arm64/usr/bin/zaku snap-stage/usr/bin/arm64/

            - name: "Set Snap release channel"
              id: snap_channel
              shell: bash
              run: |
                  VERSION="${{ needs.version_or_publish.outputs.version }}"

                  if [[ "$VERSION" == *"-alpha."* ]]; then
                      echo "channel=edge" >> $GITHUB_OUTPUT
                  elif [[ "$VERSION" == *"-beta."* ]]; then
                      echo "channel=beta" >> $GITHUB_OUTPUT
                  elif [[ "$VERSION" == *"-rc."* ]]; then
                      echo "channel=candidate" >> $GITHUB_OUTPUT
                  else
                      echo "channel=stable" >> $GITHUB_OUTPUT
                  fi

            - name: "Build Snap"
              uses: snapcore/action-build@v1
              id: build

            - name: "Publish to Snap Store"
              uses: snapcore/action-publish@v1
              env:
                  SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
              with:
                  snap: ${{ steps.build.outputs.snap }}
                  release: ${{ steps.snap_channel.outputs.channel }}
